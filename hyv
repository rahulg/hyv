#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
import textwrap
import uuid

from configparser import SafeConfigParser, NoSectionError


XHYVE_CODES = {
    'reboot': 0,
    'halt': 2,
}


VERSION = (0, 3, 0)


def version():
    return '.'.join(map(str, VERSION))


class PathExistsError(Exception):
    pass


def opoo(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


CONFIG_TEMPLATE = '''
    [hyv]
    uuid = {uuid}
    ram = 1G
    vcpu = 2
    disk = disk.img
    ; iso = live.iso
    ; bridge = en0

    [linux]
    kernel = vmlinuz
    kargs = earlyprintk=serial console=ttyS0 root=/dev/vda1
    initrd = initrd.img

    ; [freebsd]
    ; userboot = userboot.so
    ; bootvol = disk.img
    ; kernelenv = 
'''


class MultiAppendList(list):

    def __init__(self, *args, **kwargs):
        super(MultiAppendList, self).__init__(*args, **kwargs)

    def mappend(self, *args):
        self.extend(args)


def new_config(path):
    if os.path.exists(path):
        raise PathExistsError
    with open(path, 'w') as cf:
        vm_uuid = uuid.uuid4()
        config = CONFIG_TEMPLATE.format(uuid=vm_uuid)
        config = textwrap.dedent(config).lstrip('\n')
        cf.write(config)


def parse_config(path):
    config = SafeConfigParser()
    with open(path, 'r') as cf:
        config.read_file(cf)
    return config


def attempt(f, e=lambda: None):
    try:
        f()
    except KeyError:
        e()


def run(opts, config):

    common = config['hyv']
    linux = config['linux'] if config.has_section('linux') else None
    freebsd = config['freebsd'] if config.has_section('freebsd') else None

    argv = MultiAppendList()
    argv.mappend('xhyve', '-A')
    argv.mappend('-s', '0:0,hostbridge')
    argv.mappend('-s', '31,lpc')
    argv.mappend('-l', 'com1,stdio')
    argv.mappend('-U', common['uuid'])
    argv.mappend('-m', common['ram'])
    attempt(
        lambda: argv.mappend('-s', '2:0,virtio-net,{}'.format(common['bridge'])),
        lambda: argv.mappend('-s', '2:0,virtio-net'),
    )
    attempt(lambda: argv.mappend('-c', common['vcpu']))
    attempt(lambda: argv.mappend('-s', '3,ahci-cd,{}'.format(common['iso'])))
    attempt(lambda: argv.mappend('-s', '4,virtio-blk,{}'.format(common['disk'])))

    if linux:
        argv.mappend('-f', 'kexec,{},{},{}'.format(
            linux['kernel'],
            linux['initrd'],
            linux['kargs'],
        ))

    if freebsd:
        argv.mappend('-f', 'fbsd,{},{},{}'.format(
            freebsd['userboot'],
            freebsd['bootvol'],
            freebsd['kernelenv'],
        ))

    if opts.dry_run:
        print(argv)
        return

    while True:
        retcode = subprocess.call(argv)
        if retcode != XHYVE_CODES['reboot']:
            break


def main():
    parser = argparse.ArgumentParser(
        description='CLI tool to launch xhyve VMs',
    )

    parser.add_argument(
        '--version',
        action='version',
        version='%(prog)s {}'.format(version()),
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='show the xhyve command line instead of running it',
    )
    parser.add_argument(
        '--config', '-c',
        action='store',
        default='config.hyv',
        help='configuration file',
    )
    parser.add_argument(
        '--new',
        action='store_true',
        help='create a new skeleton configuration file',
    )

    opts = parser.parse_args()

    if opts.new:
        try:
            new_config(opts.config)
        except PathExistsError:
            opoo('config file \'{}\' exists, not overwriting'.format(opts.config))
            return 1
    else:

        try:
            config = parse_config(opts.config)
        except FileNotFoundError:
            opoo('config file \'{}\' not found'.format(opts.config))
            return 1
        except NoSectionError as e:
            opoo('config error! all options must be under the [hyv] section')
            return 1

        try:
            run(opts, config)
        except Exception as e:
            opoo(e)
            return 1

    return 0


if __name__ == '__main__':
    sys.exit(main())
