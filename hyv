#!/usr/bin/env python3

import argparse
import itertools
import os
import subprocess
import sys
import textwrap
import uuid

from typing import List, Optional, Tuple, Union

from configparser import SafeConfigParser, NoSectionError, ParsingError


XHYVE_DEFAULT_BIN = 'hyperkit'


XHYVE_CODES = {
    'reboot': 0,
    'halt': 2,
}


VERSION = (0, 8, 1)


def version() -> str:
    return '.'.join(map(str, VERSION))


def realpath(path: str) -> str:
    return os.path.abspath(os.path.expanduser(path))


class PathExistsError(Exception):
    def __init__(self, *args, **kwargs):
        Exception.__init__(self, *args, **kwargs)


class FormatError(Exception):
    def __init__(self, *args, **kwargs):
        Exception.__init__(self, *args, **kwargs)


def opoo(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


CONFIG_TEMPLATE = '''
    [hyv]
    uuid = {uuid}
    ram = 1G
    vcpus = 2
    disk = disk.img
    ; iso = live.iso

    [linux]
    kernel = vmlinuz
    kargs = earlyprintk=serial console=ttyS0 root=/dev/vda1
    initrd = initrd.img

    ; [freebsd]
    ; userboot = userboot.so
    ; bootvol = disk.img
    ; kernelenv =
'''


class MultiAppendList(list):

    def __init__(self, *args, **kwargs):
        super(MultiAppendList, self).__init__(*args, **kwargs)

    def mappend(self, *args):
        self.extend(args)


class PCIDevice(object):

    def __init__(
        self,
        address: Union[str, int, Tuple[int, int]],
        driver: str,
        config: Optional[Union[str, List[str]]] = None,
    ):
        if type(address) == str:
            self.address = address
        elif type(address) == int:
            self.address = str(address)
        elif type(address) == tuple:
            self.address = '{}:{}'.format(*address)

        self.driver = driver

        if type(config) == str:
            self.config = [config]
        else:
            self.config = config

    def to_str(self) -> str:
        pci_args = '{},{}'.format(self.address, self.driver)
        if self.config:
            pci_args += ','.join(('', *self.config))
        return pci_args

    @classmethod
    def from_str(cls, pci_args: str) -> 'PCIDevice':
        args = pci_args.split(',')
        try:
            address = args[0]
            driver = args[1]
        except IndexError:
            raise FormatError('failed to parse pci device str')
        try:
            config = args[2:]
        except IndexError:
            config = None

        return cls(address, driver, config)


class VirtualMachine(object):

    def __init__(self, uuid: str, ram: str = '1G', vcpus: int = None, acpi: bool = True, rtc_in_utc: bool = True):
        self.uuid = uuid
        self.vcpus = vcpus
        self.ram = ram
        self.net_id = itertools.count(start=0, step=1)
        # skip to 3, network uses 2
        self.pci_slot_id = itertools.count(start=3, step=1)
        self.devices = []
        self.boot = []
        self.acpi = acpi
        self.rtc_in_utc = rtc_in_utc
        self.dry_run = False

    def add_pci_device(
        self,
        driver: str,
        slot: Optional[str] = None,
        function: Optional[str] = None,
        config: Optional[Union[str, List[str]]] = None,
    ):
        if slot is not None:
            address = str(slot)
        else:
            address = str(next(self.pci_slot_id))
        if function is not None:
            address += ':{}'.format(function)
        self.devices.append(PCIDevice(
            address,
            driver,
            config,
        ))

    def add_network_device(self, driver: str = 'virtio-net', config: Optional[List[str]] = None):
        self.add_pci_device(
            driver,
            slot=2,
            function=next(self.net_id),
            config=config,
        )

    def add_iso(self, path: str):
        path = realpath(path)
        if not self.dry_run and not os.path.exists(path):
            raise FileNotFoundError('iso not found: {}'.format(path))
        self.add_pci_device('ahci-cd', config=path)

    def add_disk(self, path: str):
        path = realpath(path)
        if not self.dry_run and not os.path.exists(path):
            raise FileNotFoundError('disk not found: {}'.format(path))

        if 'qcow' in os.path.splitext(path)[1]:
            driver = 'ahci-hd'
            disk = 'file://{}?sync=1&buffered=1,format=qcow,qcow-config=discard=true;compact_after_unmaps=0'.format(path)
        else:
            driver = 'virtio-blk'
            disk = path
        self.add_pci_device(driver, config=disk)

    def set_boot(self, boot_mechanism: str, *args: List[str]):
        self.boot = [boot_mechanism]
        self.boot.extend(args)

    def run(self, xhyve_bin: str):
        argv = MultiAppendList()
        argv.append(xhyve_bin)

        argv.mappend('-U', self.uuid)

        if self.acpi:
            argv.append('-A')
        if self.rtc_in_utc:
            argv.append('-u')

        argv.mappend('-m', self.ram)
        if self.vcpus:
            argv.mappend('-c', self.vcpus)

        argv.mappend('-l', 'com1,stdio')
        for device in self.devices:
            argv.mappend('-s', device.to_str())

        argv.mappend('-f', ','.join(self.boot))

        if self.dry_run:
            return ' '.join(map(
                lambda arg: "'{}'".format(arg) if ' ' in arg else arg,
                argv,
            ))

        while True:
            retcode = subprocess.call(argv)
            if retcode != XHYVE_CODES['reboot']:
                return 'hyv: vm halted'


def new_config(path):
    if os.path.exists(path):
        raise PathExistsError('path exists: {}'.format(path))
    with open(path, 'w') as cf:
        vm_uuid = uuid.uuid4()
        config = CONFIG_TEMPLATE.format(uuid=vm_uuid)
        config = textwrap.dedent(config).lstrip('\n')
        cf.write(config)


def parse_config(path):
    config = SafeConfigParser()
    with open(path, 'r') as cf:
        config.read_file(cf)
    return config


def attempt(f, e=lambda: None):
    try:
        f()
    except KeyError:
        e()


def run(opts, config):

    vm_conf = config['hyv']
    linux = config['linux'] if config.has_section('linux') else None
    freebsd = config['freebsd'] if config.has_section('freebsd') else None

    if linux and freebsd:
        opoo('both linux and freebsd are specified in config. unsure which to boot.')

    vm = VirtualMachine(vm_conf['uuid'])
    vm.dry_run = opts.dry_run
    if 'ram' in vm_conf:
        vm.ram = vm_conf['ram']
    if 'vcpus' in vm_conf:
        vm.vcpus = vm_conf['vcpus']
    vm.add_pci_device('hostbridge', slot=0, function=0)
    vm.add_pci_device('lpc', slot=31)
    vm.add_pci_device('virtio-rnd')
    vm.add_network_device('virtio-net')

    # TODO: multiple ISOs
    attempt(lambda: vm.add_iso(vm_conf['iso']))
    # TODO: multile disks
    attempt(lambda: vm.add_disk(vm_conf['disk']))

    if linux:
        vm.set_boot('kexec', linux['kernel'], linux['initrd'], linux['kargs'])

    if freebsd:
        vm.set_boot('fbsd', freebsd['userboot'], freebsd['bootvol'], freebsd['kernelenv'])

    xhyve_bin = config['hyv'].get('bin', XHYVE_DEFAULT_BIN)
    opoo(vm.run(xhyve_bin))


def main():
    parser = argparse.ArgumentParser(
        description='CLI tool to launch xhyve VMs',
    )

    parser.add_argument(
        '--version',
        action='version',
        version='%(prog)s {}'.format(version()),
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='show the xhyve command line instead of running it',
    )
    parser.add_argument(
        '--config', '-c',
        action='store',
        default='config.hyv',
        help='configuration file',
    )
    parser.add_argument(
        '--new',
        action='store_true',
        help='create a new skeleton configuration file',
    )

    opts = parser.parse_args()

    if opts.new:
        try:
            new_config(opts.config)
        except PathExistsError:
            opoo('config file \'{}\' exists, not overwriting'.format(opts.config))
            return 1
    else:

        try:
            config = parse_config(opts.config)
        except FileNotFoundError:
            opoo('config file \'{}\' not found'.format(opts.config))
            return 1
        except ParsingError as e:
            opoo(e)
            return 1
        except NoSectionError as e:
            opoo('config syntax error')
            return 1

        try:
            run(opts, config)
        except Exception as e:
            opoo(e)
            return 1

    return 0


if __name__ == '__main__':
    sys.exit(main())
