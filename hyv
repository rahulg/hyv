#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
import textwrap
import uuid


class PathExistsError(Exception):
    pass


class HyvConfig(object):
    pass


def opoo(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


CONFIG_TEMPL = '''
    # comment out disk if you don't have an image
    # comment out vcpu to disable SMP
    # key: value
    uuid: {uuid}
    kernel: vmlinuz
    kargs: earlyprintk=serial console=ttyS0 acpi=off root=/dev/vda1
    initrd: initrd.img
    ram: 1G
    # vcpu: 2
    disk: disk.img
    # iso: live.iso
    # bridge: en0
'''


def new_config(path):
    if os.path.exists(path):
        raise PathExistsError
    with open(path, 'w') as cf:
        vm_uuid = uuid.uuid4()
        config = CONFIG_TEMPL.format(uuid=vm_uuid)
        config = textwrap.dedent(config).lstrip('\n')
        cf.write(config)


def parse_config(path):
    config = HyvConfig()
    with open(path, 'r') as cf:
        for line in cf:
            line = line.strip()
            if line[0] == '#':
                continue
            tok = line.split(None, 1)
            config.__dict__[tok[0].rstrip(':')] = tok[1]
    return config


def attempt(f, e=lambda: None):
    try:
        f()
    except AttributeError:
        e()


def run(opts, config):
    argv = ['xhyve']
    argv.extend(('-s', '0:0,hostbridge'))
    argv.extend(('-s', '31,lpc'))
    argv.extend(('-l', 'com1,stdio'))
    argv.extend(('-U', config.uuid))
    argv.extend(('-m', config.ram))
    attempt(
        lambda: argv.extend(('-s', '2:0,virtio-net,{}'.format(config.bridge))),
        lambda: argv.extend(('-s', '2:0,virtio-net')),
    )
    attempt(lambda: argv.extend(('-c', config.vcpu)))
    attempt(lambda: argv.extend(('-s', '3,ahci-cd,{}'.format(config.iso))))
    attempt(lambda: argv.extend(('-s', '4,virtio-blk,{}'.format(config.disk))))
    argv.extend(('-f', 'kexec,{},{},{}'.format(
        config.kernel,
        config.initrd,
        config.kargs,
    )))

    if opts.dry_run:
        print(argv)
        return

    try:
        subprocess.check_call(argv)
    except:
        pass


def main():
    parser = argparse.ArgumentParser(
        description='CLI tool to launch xhyve VMs',
    )

    parser.add_argument(
        '--version',
        action='version',
        version='%(prog)s 0.1.0',
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='show the xhyve command line instead of running it',
    )
    parser.add_argument(
        '--config', '-c',
        action='store',
        default='config.hyv',
        help='configuration file',
    )
    parser.add_argument(
        '--new',
        action='store_true',
        help='create a new skeleton configuration file',
    )

    opts = parser.parse_args()

    if opts.new:
        try:
            new_config(opts.config)
        except PathExistsError:
            opoo('config file {} exists, not overwriting'.format(opts.config))
    else:
        try:
            config = parse_config(opts.config)
        except (KeyError, IndexError) as e:
            opoo('config syntax error')
        try:
            run(opts, config)
        except AttributeError as e:
            opoo('missing core setting!')
            opoo(e)


if __name__ == '__main__':
    main()
